<!DOCTYPE HTML>
<html>
<head><meta name="generator" content="Hexo 3.8.0">
  <meta charset="utf-8">
  
  <title>原型与原型链 › he</title>
  <meta name="author" content="何方">
  
  <meta name="description" content="例子1function Person(name){
    this.name = name;
    this.age = age;
}
Person.prototype.sayName = function(){
    console.log(this.name);
}

var p1 = n">
  
  
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <meta property="og:title" content="原型与原型链">
  <meta property="og:site_name" content="he">

  
    <meta property="og:image" content>
  

  <link href="/favicon.png" rel="icon">
  <link rel="alternate" href="/atom.xml" title="he" type="application/atom+xml">
  <link rel="stylesheet" href="/css/style.css" media="screen" type="text/css">
  <!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
  

</head>
</html>

<body>
  <header id="header"><div class="meta inner">
  <h1><a href="/">he</a></h1>
  <h2><a href="/"></a></h2>
  <nav id="main-nav">
    <ul>
      
      <li><a href="/about">About</a></li>
      
      <li><a href="/archives">Archives</a></li>
      
      <li><a href="/atom.xml">RSS</a></li>
      
    </ul>
    <div class="clearfix"></div>
  </nav>
</div>
<div class="clearfix"></div>
</header>
  <div id="content" class="inner">
    <div id="main-col" class="alignleft"><div id="wrapper"><article class="post">
  <div class="post-content">
    <header>
      
  
    <h1 class="title">原型与原型链</h1>
  

      
        <time datetime="2018-12-24T11:20:17.000Z">2018-12-24</time>
      
    </header>
    <div class="entry">
      
        <h4 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h4><pre><code>function Person(name){
    this.name = name;
    this.age = age;
}
Person.prototype.sayName = function(){
    console.log(this.name);
}

var p1 = new Person(&apos;a&apos;);
var p2 = new Person(&apos;b&apos;);
p1.sayName();  
p2.sayName();  
</code></pre><p>1.new 一个函数本质上做了什么？<br>  1)创建了一个空的对象<br>  2)空对象的<strong>proto</strong>指向了类Modal()的prototype<br>  3)在执行函数的过程中，给this赋值，函数里的this代表了空对象，返回出去<br>  4)将this赋值给modal<br>2.通过函数定义了一个类Person，它自动获取了属性prototype，<br>每个类的实例也就是p1、p2内部都会有一个<strong>proto</strong>的属性，如下图:<br><img src="http://video.jirengu.com/xdml/image/996010fa-de82-489f-9b0a-20943cd224cf/2018-12-10-22-29-34.png" alt="image1"></p>
<h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><p>当前的p1实例，查找toString()的方法先从p1的属性里找，<br>没有找到,再从 p1.<strong>proto</strong> 中找，没有找到,<br>再从 p1.<strong>proto</strong>.<strong>proto</strong> 中找，找到后返回<br><img src="http://video.jirengu.com/xdml/image/996010fa-de82-489f-9b0a-20943cd224cf/2018-12-11-15-9-42.png" alt="image2"></p>
<h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><pre><code>function People(){}
var p = new People()
p.__proto__ === People.prototype 
People.__proto__ === Function.prototype
People.prototype.__proto__ === Object.prototype
</code></pre><p><img src="https://pic1.zhimg.com/b6aa8d4260e78ce3618e0d85febc2bbc_r.jpg" alt="image3"><br>（1）People函数创建了对象 p，所以People.prototype === p.<strong>proto</strong>；<br>（2）Object函数创建了People.prototype对象，所以Object.prototype === People.prototype.<strong>proto</strong>；<br>（3）People 作为对象的角色被函数Function创建，所以 Function.prototype === People.<strong>proto</strong>;</p>
<h3 id="例子4"><a href="#例子4" class="headerlink" title="例子4"></a>例子4</h3><p><img src="https://pic3.zhimg.com/c2891fbeeb0530ef61885c0e6414170a_r.jpg" alt="image4"><br>（1）任何函数都是 Function 创建，所以Function 创建了 Function，所以 Function.prototype === Function.<strong>proto</strong>；<br>（2）Object 也是函数。所以Function创建了Object，所以 Function.prototype === Object.<strong>proto</strong> ；<br>（3）Function.prototype 是普通对象，普通对象是由Object创建的，所以 Function.prototype.<strong>proto</strong> === Object.prototype</p>
<h3 id="例子5"><a href="#例子5" class="headerlink" title="例子5"></a>例子5</h3><pre><code>Object instanceof Function
Function instanceof Object
Function instanceof Function
Object instanceof Object
</code></pre><p>instanceof的作用是判断一个对象是不是一个函数的实例。比如obj instanceof fn,<br>实际上是判断fn的prototype是不是在obj的原型链上。<br>比如: </p>
<pre><code>obj.__proto__ === fn.prototype
obj.__proto__.__proto__ === fn.prototype
obj.__proto__..._proto__ === fn.prototype
</code></pre><p>只要一个成立即可。<br>1.对于Function instanceof Function,<br>因为 Function.<strong>proto</strong> === Function.prototype<br>所以为true。</p>
<p>2.对于Object instanceof Object,<br>因为 Object.<strong>proto</strong>.<strong>proto</strong> === Function.prototype.<strong>proto</strong> === Object.prototype,<br>所以为true</p>
<p>3.对于Function instanceof Object,<br>因为 Function.<strong>proto</strong>.<strong>proto</strong> === Function.prototype.<strong>proto</strong> === Object.prototype,<br>所以为true</p>
<p>4.对于Object instanceof Function,因为 Object.<strong>proto</strong> === Function.prototype<br>所以为true</p>

      
    </div>
      
      <footer>
        
  
  <div class="categories">
    <a href="/categories/Exercise-在此处输入这篇文章的分类。/">Exercise   //在此处输入这篇文章的分类。</a>
  </div>

        
        
  <div class="addthis addthis_toolbox addthis_default_style">
    
      <a class="addthis_button_facebook_like" fb:like:layout="button_count"></a>
    
    
      <a class="addthis_button_tweet"></a>
    
    
      <a class="addthis_button_google_plusone" g:plusone:size="medium"></a>
    
    
      <a class="addthis_button_pinterest_pinit" pi:pinit:layout="horizontal"></a>
    
    <a class="addthis_counter addthis_pill_style"></a>
  </div>
  <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js"></script>

      
      <div class="clearfix"></div>
      </footer>
  </div>
</article>


<section id="comment">
  
</section>


</div></div>
    <aside id="sidebar" class="alignright">
  <div class="search">
  <form action="//google.com/search" method="get" accept-charset="utf-8">
    <input type="search" name="q" results="0" placeholder="Search">
    <input type="hidden" name="q" value="site:hefang.site">
  </form>
</div>

  
<div class="widget tag">
  <h3 class="title">Recent Posts</h3>
  <ul class="entry">
    
      <li>
        <a href="/Exercise-在此处输入这篇文章的分类。/常见排序算法">常见排序算法</a>
      </li>
    
      <li>
        <a href="/Exercise-在此处输入这篇文章的分类。/原型与原型链">原型与原型链</a>
      </li>
    
      <li>
        <a href="/Exercise-在此处输入这篇文章的分类。/动画队列">动画队列</a>
      </li>
    
      <li>
        <a href="/Exercise-在此处输入这篇文章的分类。/js作用域相关介绍">js作用域</a>
      </li>
    
      <li>
        <a href="/Exercise-在此处输入这篇文章的分类。/介绍浏览器的渲染机制">浏览器的渲染机制</a>
      </li>
    
  </ul>
</div>


  
<div class="widget tag">
  <h3 class="title">Categories</h3>
  <ul class="entry">
  
    <li><a href="/categories/Exercise-在此处输入这篇文章的分类。/">Exercise   //在此处输入这篇文章的分类。</a><small>11</small></li>
  
  </ul>
</div>


  
</aside>
    <div class="clearfix"></div>
  </div>
  <footer id="footer" class="inner"><div class="alignleft">
  
  &copy; 2019 何方
  
</div>
<div class="clearfix"></div></footer>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>



</body>
</html>

